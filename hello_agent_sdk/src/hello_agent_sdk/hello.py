import os
import chainlit as cl


from agents import Agent, Runner, OpenAIChatCompletionsModel, AsyncOpenAI
from agents.run import RunConfig
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

gemini_api_key = os.getenv("GEMINI_API_KEY")

# Step-1 : Provider
provider = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
)
# Step-2 : Model
model = OpenAIChatCompletionsModel(model="gemini-2.5-flash", openai_client=provider)
# Step-3 : Define configurations at run level
config = RunConfig(model=model, model_provider=provider, tracing_disabled=True)
# Step-4 : Define Agent
agent: Agent = Agent(name="Learning Supporting Agent", instructions="You have to answer the questions asked by the user. Be polite and respectful.")
# Step-5 : Run the agent
# runner = Runner.run_sync(agent, input="Hello how are you?", run_config=config)
# print(runner.final_output)


"""
    This Python function listens for messages, runs a synchronous operation using a Runner class, and
    sends the final output as a message.
    
    :param message: The `message` parameter in the `main` function represents the message object that
    triggers the function when a message is received. It contains information about the message, such as
    the content, sender, timestamp, and other relevant details. In this context, the `message` parameter
    is used to extract the
    :type message: cl.Message
"""

@cl.on_chat_start
async def on_chat_start():
    # The line `cl.user_session.set("history", [])` is initializing an empty list named "history" in
    # the user session. This list will be used to store the conversation history between the user and
    # the assistant during the chat session. It ensures that the conversation history is maintained
    # and updated as the chat progresses, allowing for a seamless interaction experience.
    cl.user_session.set("history", [])
    await cl.Message(content="Hello! I am a Learning Supporting Agent. How can I help you?").send()
# Step-5 : Run the agent

@cl.on_message 
async def main(message: cl.Message):
    # The line `history = cl.user_session.get("history")` is retrieving the value stored in the user
    # session under the key "history". In this context, it is fetching the conversation history
    # between the user and the assistant that has been stored and updated during the chat session.
    # This retrieved history is then used to append new messages exchanged between the user and the
    # assistant, ensuring that the conversation flow is maintained and accessible for further
    # interactions.
    history = cl.user_session.get("history") 
    # The line `history.append({"role": "user", "content": message.content})` is adding a new entry to
    # the `history` list in the user session. This entry represents a message exchanged between the
    # user and the assistant during the chat session. It includes the role of the sender (in this
    # case, "user") and the content of the message sent by the user. By appending this information to
    # the `history` list, the conversation history is updated and maintained, allowing for a
    # chronological record of interactions between the user and the assistant.
    history.append({"role": "user", "content": message.content})
    # The line `result = Runner.run_sync(agent, input=history, run_config=config)` is executing a
    # synchronous operation using a `Runner` class. 
    # . It passes three arguments to the `run_sync` method:
    #    - `agent`: This is likely an instance of an agent or a model that will process the input and
    #      generate a response.
    #    - `input=history`: This argument provides the input data for the agent to process. In this case,
    #      it is passing the `history`, which is presumably a list of previous interactions or
    #      messages exchanged between the user and the assistant.
    #    - `run_config=config`: This argument specifies the configuration settings for the run, which
    #      may include parameters such as model settings, execution options, or other relevant
    #      configurations.
    result = Runner.run_sync(agent,input=history,run_config=config)
    # The line `history.append({"role": "assistant", "content": result.final_output})` is adding a new
    # entry to the `history` list in the user session. This entry represents a message generated by
    # the assistant in response to the user's input during the chat session.
    history.append({"role": "assistant", "content": result.final_output})
    # `cl.user_session.set("history", history)` is a line of code that sets the value of the key
    # "history" in the user session to the updated `history` list. This operation updates the
    # conversation history between the user and the assistant during the chat session. By setting the
    # user session key "history" to the latest version of the conversation history list, it ensures
    # that the chat session's progress and interactions are stored and accessible for future reference
    # and continuity.
    cl.user_session.set("history", history)
    await cl.Message(content=result.final_output).send()
    print(result.final_output)